//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: manager_service

package mngrsvc

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for ManagerService service
type ManagerServiceClient interface{
  RegisterDaemon(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* DaemonRegisterReply, error)  
  AssignWorker(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* WorkerAssignReply, error)  
  NotifyWorkerExit(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* WorkerExitNotifyReply, error)  
}

type managerServiceClient struct {
  cc *grpc.ClientConn
}

func NewManagerServiceClient(cc *grpc.ClientConn) ManagerServiceClient {
  return &managerServiceClient{cc}
}

func (c *managerServiceClient) RegisterDaemon(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* DaemonRegisterReply, error) {
  out := new(DaemonRegisterReply)
  err := grpc.Invoke(ctx, "/mngrsvc.ManagerService/RegisterDaemon", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *managerServiceClient) AssignWorker(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* WorkerAssignReply, error) {
  out := new(WorkerAssignReply)
  err := grpc.Invoke(ctx, "/mngrsvc.ManagerService/AssignWorker", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *managerServiceClient) NotifyWorkerExit(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* WorkerExitNotifyReply, error) {
  out := new(WorkerExitNotifyReply)
  err := grpc.Invoke(ctx, "/mngrsvc.ManagerService/NotifyWorkerExit", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for ManagerService service
type ManagerServiceServer interface {
  RegisterDaemon(context.Context, *DaemonRegisterRequest) (*flatbuffers.Builder, error)  
  AssignWorker(context.Context, *WorkerAssignRequest) (*flatbuffers.Builder, error)  
  NotifyWorkerExit(context.Context, *WorkerExitNotifyRequest) (*flatbuffers.Builder, error)  
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
  s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_RegisterDaemon_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(DaemonRegisterRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ManagerServiceServer).RegisterDaemon(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/mngrsvc.ManagerService/RegisterDaemon",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ManagerServiceServer).RegisterDaemon(ctx, req.(* DaemonRegisterRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _ManagerService_AssignWorker_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(WorkerAssignRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ManagerServiceServer).AssignWorker(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/mngrsvc.ManagerService/AssignWorker",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ManagerServiceServer).AssignWorker(ctx, req.(* WorkerAssignRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _ManagerService_NotifyWorkerExit_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(WorkerExitNotifyRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ManagerServiceServer).NotifyWorkerExit(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/mngrsvc.ManagerService/NotifyWorkerExit",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ManagerServiceServer).NotifyWorkerExit(ctx, req.(* WorkerExitNotifyRequest))
  }
  return interceptor(ctx, in, info, handler)
}


var _ManagerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "mngrsvc.ManagerService",
  HandlerType: (*ManagerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "RegisterDaemon",
      Handler: _ManagerService_RegisterDaemon_Handler, 
    },
    {
      MethodName: "AssignWorker",
      Handler: _ManagerService_AssignWorker_Handler, 
    },
    {
      MethodName: "NotifyWorkerExit",
      Handler: _ManagerService_NotifyWorkerExit_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

