// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package mngrsvc

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WorkerAssignRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsWorkerAssignRequest(buf []byte, offset flatbuffers.UOffsetT) *WorkerAssignRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorkerAssignRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WorkerAssignRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorkerAssignRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorkerAssignRequest) WorkerCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorkerAssignRequest) MutateWorkerCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *WorkerAssignRequest) GpuCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorkerAssignRequest) MutateGpuCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *WorkerAssignRequest) GpuMem(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *WorkerAssignRequest) GpuMemLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorkerAssignRequest) MutateGpuMem(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func WorkerAssignRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func WorkerAssignRequestAddWorkerCount(builder *flatbuffers.Builder, workerCount int32) {
	builder.PrependInt32Slot(0, workerCount, 0)
}
func WorkerAssignRequestAddGpuCount(builder *flatbuffers.Builder, gpuCount int32) {
	builder.PrependInt32Slot(1, gpuCount, 0)
}
func WorkerAssignRequestAddGpuMem(builder *flatbuffers.Builder, gpuMem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(gpuMem), 0)
}
func WorkerAssignRequestStartGpuMemVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func WorkerAssignRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type WorkerAssignReply struct {
	_tab flatbuffers.Table
}

func GetRootAsWorkerAssignReply(buf []byte, offset flatbuffers.UOffsetT) *WorkerAssignReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorkerAssignReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WorkerAssignReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorkerAssignReply) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorkerAssignReply) WorkerAddress(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WorkerAssignReply) WorkerAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WorkerAssignReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func WorkerAssignReplyAddWorkerAddress(builder *flatbuffers.Builder, workerAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(workerAddress), 0)
}
func WorkerAssignReplyStartWorkerAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorkerAssignReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type DaemonRegisterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDaemonRegisterRequest(buf []byte, offset flatbuffers.UOffsetT) *DaemonRegisterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DaemonRegisterRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DaemonRegisterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DaemonRegisterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DaemonRegisterRequest) DaemonAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DaemonRegisterRequest) FreeMemory(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *DaemonRegisterRequest) FreeMemoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DaemonRegisterRequest) MutateFreeMemory(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *DaemonRegisterRequest) Uuid(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DaemonRegisterRequest) UuidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DaemonRegisterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DaemonRegisterRequestAddDaemonAddress(builder *flatbuffers.Builder, daemonAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(daemonAddress), 0)
}
func DaemonRegisterRequestAddFreeMemory(builder *flatbuffers.Builder, freeMemory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(freeMemory), 0)
}
func DaemonRegisterRequestStartFreeMemoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DaemonRegisterRequestAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(uuid), 0)
}
func DaemonRegisterRequestStartUuidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DaemonRegisterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type DaemonRegisterReply struct {
	_tab flatbuffers.Table
}

func GetRootAsDaemonRegisterReply(buf []byte, offset flatbuffers.UOffsetT) *DaemonRegisterReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DaemonRegisterReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DaemonRegisterReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DaemonRegisterReply) Table() flatbuffers.Table {
	return rcv._tab
}

func DaemonRegisterReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func DaemonRegisterReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type WorkerExitNotifyRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsWorkerExitNotifyRequest(buf []byte, offset flatbuffers.UOffsetT) *WorkerExitNotifyRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorkerExitNotifyRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WorkerExitNotifyRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorkerExitNotifyRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorkerExitNotifyRequest) WorkerAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorkerExitNotifyRequest) Uuid(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WorkerExitNotifyRequest) UuidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WorkerExitNotifyRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WorkerExitNotifyRequestAddWorkerAddress(builder *flatbuffers.Builder, workerAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(workerAddress), 0)
}
func WorkerExitNotifyRequestAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uuid), 0)
}
func WorkerExitNotifyRequestStartUuidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorkerExitNotifyRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type WorkerExitNotifyReply struct {
	_tab flatbuffers.Table
}

func GetRootAsWorkerExitNotifyReply(buf []byte, offset flatbuffers.UOffsetT) *WorkerExitNotifyReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorkerExitNotifyReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WorkerExitNotifyReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorkerExitNotifyReply) Table() flatbuffers.Table {
	return rcv._tab
}

func WorkerExitNotifyReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func WorkerExitNotifyReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
